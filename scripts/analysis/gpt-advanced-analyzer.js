#!/usr/bin/env node

/**
 * GPT ADVANCED ANALYZER - Exploitation de la puissance compl√®te de GPT-5
 * 
 * PHILOSOPHIE: GPT comme analyste football professionnel niveau √©lite
 * - Analyse multi-dimensionnelle avec donn√©es contextuelles pr√©cises
 * - Raisonnement probabiliste avanc√© sur patterns complexes
 * - Int√©gration th√©ories tactiques modernes (Guardiola, Klopp, etc.)
 * - Calculs micro-adjustements bas√©s sur psychologie du sport
 */

require('dotenv').config()
const { createClient } = require('@supabase/supabase-js')
const axios = require('axios')

const OPENAI_API_KEY = process.env.OPENAI_API_KEY
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL  
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)

class GPTAdvancedAnalyzer {
    constructor() {
        this.model = 'gpt-4' // Sera mis √† jour vers gpt-5 quand disponible
        this.apiUrl = 'https://api.openai.com/v1/chat/completions'
        
        // Base de connaissances football int√©gr√©e
        this.footballKnowledge = {
            formations: require('./data/formations-tactical-data.json') || {},
            coaches: require('./data/coaches-philosophy.json') || {},
            venues: require('./data/venues-characteristics.json') || {}
        }
    }

    /**
     * 1. ANALYSE TACTIQUE HYPER-PR√âCISE
     * Exploitation maximale des capacit√©s GPT pour d√©cortiquer les matchups
     */
    async analyzeTacticalMatchupAdvanced(homeTeam, awayTeam, context) {
        console.log('üß† GPT-5: Analyse tactique niveau professionnel')

        const systemPrompt = this.buildTacticalSystemPrompt()
        const userPrompt = this.buildAdvancedTacticalPrompt(homeTeam, awayTeam, context)

        try {
            const response = await this.callGPT([
                { role: 'system', content: systemPrompt },
                { role: 'user', content: userPrompt }
            ], {
                temperature: 0.1, // Pr√©cision maximale
                max_tokens: 2000,
                top_p: 0.9
            })

            return this.parseAdvancedTacticalResponse(response)
            
        } catch (error) {
            console.error('‚ùå Erreur GPT Tactique:', error.message)
            return null
        }
    }

    buildTacticalSystemPrompt() {
        return `Tu es un analyste tactique football de niveau mondial, combinant:

EXPERTISE TECHNIQUE:
- Ma√Ætrise compl√®te des syst√®mes tactiques modernes (4-3-3 false 9, 3-4-2-1 diamant, 4-2-3-1 asym√©trique, etc.)
- Connaissance approfondie des phases de jeu: construction, transition offensive, pressing, transition d√©fensive
- Analyse micro-tactique: mouvements sans ballon, couvertures, d√©crochages, appels de balle
- Principes Guardiola (positional play), Klopp (gegenpressing), Conte (3-5-2 wing-backs)

ANALYSE PROBABILISTE:
- Calcul pr√©cis des probabilit√©s d'efficacit√© tactique selon matchup
- Quantification de l'avantage tactique en pourcentages exploitables
- Identification des zones de vuln√©rabilit√© avec coefficients de risque
- Pr√©diction des adaptations en cours de match

PSYCHOLOGIE DU SPORT:
- Impact motivation sur ex√©cution tactique
- Effet pression sur qualit√© technique et prise de d√©cision
- Facteurs mentaux influen√ßant coh√©sion collective

M√âTHODE D'ANALYSE:
1. D√©cortique les syst√®mes de jeu des 2 √©quipes avec pr√©cision technique
2. Identifie les batailles tactiques cl√©s et leurs probabilit√©s de succ√®s  
3. Quantifie l'avantage/d√©savantage avec calculs pr√©cis
4. Pr√©dit les adaptations tactiques probables des entra√Æneurs
5. Calcule l'impact final sur les probabilit√©s de r√©sultat

IMPORTANT: Tes analyses doivent √™tre pr√©cises, quantifi√©es et exploitables par un algorithme de pr√©diction.`
    }

    buildAdvancedTacticalPrompt(homeTeam, awayTeam, context) {
        return `
MISSION: Analyse tactique ultra-pr√©cise du match ${homeTeam.name} vs ${awayTeam.name}

=== DONN√âES √âQUIPE DOMICILE (${homeTeam.name}) ===

SYST√àME TACTIQUE:
- Formation: ${homeTeam.formation || this.inferFormation(homeTeam)}
- Style de jeu: ${homeTeam.tactical_style || '√Ä d√©terminer'}
- Possession moyenne: ${homeTeam.possession_avg || 'N/A'}%
- Tempo (passes/min): ${this.calculateTempo(homeTeam)}
- Verticalit√© (passes longues/courtes): ${this.calculateVerticalplay(homeTeam)}

M√âTRIQUES OFFENSIVES AVANC√âES:
- xG/match: ${homeTeam.goals_per_game} (${this.getxGContext(homeTeam)})
- Conversion tirs: ${this.calculateShotConversion(homeTeam)}%
- Cr√©ativit√© (passes cl√©s/match): ${homeTeam.key_passes || 'N/A'}
- Efficacit√© derni√®re passe: ${this.calculateFinalPassEfficiency(homeTeam)}%
- Polyvalence offensive: ${this.calculateOffensivePolyvalence(homeTeam)}

M√âTRIQUES D√âFENSIVES AVANC√âES:
- xGA/match: ${homeTeam.goals_conceded_per_game} (contexte: ${this.getxGAContext(homeTeam)})
- Intensit√© pressing: ${homeTeam.pressing_intensity || this.calculatePressingFromStats(homeTeam)}
- Compacit√© d√©fensive: ${this.calculateDefensiveCompactness(homeTeam)}
- Efficacit√© duels: ${this.calculateDuelSuccess(homeTeam)}%
- R√©cup√©ration haute: ${this.calculateHighTurnovers(homeTeam)}%

TRANSITIONS & SET-PIECES:
- Vitesse transition OFF: ${this.calculateTransitionSpeed(homeTeam)}
- Efficacit√© contre-attaque: ${this.calculateCounterEfficiency(homeTeam)}
- Dangerosit√© corners: ${homeTeam.corner_conversion || this.calculateCornerThreat(homeTeam)}
- Vuln√©rabilit√© coups francs: ${this.calculateSetPieceVulnerability(homeTeam)}

=== DONN√âES √âQUIPE EXT√âRIEUR (${awayTeam.name}) ===

[M√™me structure d√©taill√©e pour √©quipe ext√©rieur]

SYST√àME TACTIQUE:
- Formation: ${awayTeam.formation || this.inferFormation(awayTeam)}
- Style de jeu: ${awayTeam.tactical_style || '√Ä d√©terminer'}
- Possession moyenne: ${awayTeam.possession_avg || 'N/A'}%
- Adaptation ext√©rieur: ${this.calculateAwayAdaptation(awayTeam)}

[...donn√©es compl√®tes awayTeam...]

=== CONTEXTE MATCH AVANC√â ===

ENVIRONNEMENT:
- Stade: ${context.venue_name} (capacit√©: ${context.venue_capacity})
- Dimensions terrain: ${context.pitch_dimensions || 'Standard'}
- Surface: ${context.surface_quality || 'Herbe naturelle'}
- M√©t√©o: ${context.weather} (impact estim√©: ${this.calculateWeatherImpact(context.weather)})
- Temp√©rature: ${context.temperature}¬∞C (impact physique: ${this.calculateTempImpact(context.temperature)})
- Vent: ${context.wind} (impact jeu a√©rien: ${this.calculateWindImpact(context.wind)})

PSYCHOLOGIQUE & MOTIVATIONNEL:
- Pression domicile: ${homeTeam.pressure_score}/1.0 (${this.interpretPressure(homeTeam.pressure_score)})
- Motivation domicile: ${homeTeam.motivation_score}/1.0 (zone: ${homeTeam.motivation_zone})
- Pression ext√©rieur: ${awayTeam.pressure_score}/1.0 (${this.interpretPressure(awayTeam.pressure_score)})
- Motivation ext√©rieur: ${awayTeam.motivation_score}/1.0 (zone: ${awayTeam.motivation_zone})
- Enjeu match: ${context.importance} (impact mental: ${this.calculateStakeImpact(context.importance)})

HISTORIQUE & TENDANCES:
- H2H r√©cent: ${context.h2h_recent || '√Ä analyser'}
- Forme domicile 5 derniers: ${homeTeam.home_form || this.calculateRecentForm(homeTeam, 'home')}
- Forme ext√©rieur 5 derniers: ${awayTeam.away_form || this.calculateRecentForm(awayTeam, 'away')}

=== DEMANDE D'ANALYSE ULTRA-PR√âCISE ===

Effectue une analyse tactique de niveau professionnel en 6 phases:

**PHASE 1: D√âCONSTRUCTION TACTIQUE**
- Analyse d√©taill√©e des 2 syst√®mes de jeu avec positions sp√©cifiques
- Identification des r√¥les de chaque ligne (d√©fense, milieu, attaque)  
- Points forts et faiblesses structurelles de chaque formation

**PHASE 2: BATAILLES TACTIQUES CL√âS**
- Identifie les 3-4 duels tactiques d√©cisifs du match
- Pour chacun: probabilit√© de succ√®s, impact sur le jeu, coefficients
- Zones du terrain o√π se joueront les moments cl√©s

**PHASE 3: AVANTAGES/D√âSAVANTAGES QUANTIFI√âS**
- Calcule l'avantage tactique pr√©cis (en %) pour chaque √©quipe
- Quantifie l'impact de chaque facteur (formation, style, adaptation)
- Coefficients d'ajustement probabilistes exploitables

**PHASE 4: SC√âNARIOS TACTIQUES PROBABLES**  
- 3 sc√©narios tactiques les plus probables avec %
- Adaptations attendues des entra√Æneurs selon √©volution
- Timeline tactique du match (0-30min, 30-60min, 60-90min)

**PHASE 5: FACTEURS DIFF√âRENCIANTS**
- √âl√©ments tactiques qui feront la diff√©rence
- Joueurs cl√©s dans le contexte tactique sp√©cifique
- Moments de match critiques d'un point de vue tactique

**PHASE 6: PR√âDICTION TACTIQUE FINALE**
- Impact tactique sur probabilit√©s 1N2
- Ajustements recommand√©s aux cotes de base
- Niveau de confiance dans l'analyse (0-100%)

**FORMAT DE R√âPONSE EXIG√â (JSON exploitable):**
{
  "tactical_analysis": {
    "home_system": "description pr√©cise formation + r√¥les",
    "away_system": "description pr√©cise formation + r√¥les", 
    "key_battles": [
      {
        "zone": "milieu central",
        "matchup": "4v3 possession vs pressing",
        "advantage": "home|away|neutral",
        "success_probability": 0.65,
        "impact_coefficient": 0.12
      }
    ]
  },
  "quantified_advantages": {
    "tactical_advantage_home": 0.08,
    "tactical_advantage_away": -0.03,
    "formation_compatibility": 0.73,
    "style_matchup_factor": 0.15
  },
  "match_scenarios": [
    {
      "scenario": "Domination possession home face bloc bas away",
      "probability": 0.45,
      "tactical_adaptations": "Switch milieux cr√©atifs, √©largir jeu"
    }
  ],
  "probability_adjustments": {
    "home_win_adjustment": +0.12,
    "draw_adjustment": -0.05,
    "away_win_adjustment": -0.07,
    "confidence": 0.84
  },
  "key_differentiators": ["Vitesse transition", "Efficacit√© pressing", "Qualit√© centres"],
  "critical_moments": ["0-15min test intensit√©", "60-75min fatigue", "80-90min changements"]
}
        `
    }

    /**
     * 2. ANALYSE PSYCHOLOGIQUE AVANC√âE 
     * GPT exploite sa compr√©hension de la psychologie humaine
     */
    async analyzePsychologicalFactors(homeTeam, awayTeam, context, recentEvents = []) {
        console.log('üß† GPT-5: Analyse psychologique approfondie')

        const systemPrompt = `Tu es un psychologue du sport sp√©cialis√© dans le football de haut niveau.

EXPERTISE:
- Psychologie de la performance sous pression
- Dynamiques de groupe et coh√©sion d'√©quipe  
- Impact des enjeux sur la mentalit√©
- Gestion de l'adversit√© et r√©silience mentale
- Facteurs motivationnels selon contexte (classement, objectifs)
- Analyse comportementale des profils d'√©quipe

M√âTHODE:
1. √âvalue l'√©tat mental des 2 √©quipes avec pr√©cision
2. Quantifie l'impact psychologique de chaque facteur
3. Pr√©dit les r√©actions sous pression/adversit√©
4. Calcule les ajustements de performance selon mental
5. Identifie les leviers psychologiques d√©cisifs

Tes analyses doivent √™tre scientifiques, quantifi√©es et exploitables.`

        const userPrompt = this.buildPsychologicalPrompt(homeTeam, awayTeam, context, recentEvents)

        try {
            const response = await this.callGPT([
                { role: 'system', content: systemPrompt },
                { role: 'user', content: userPrompt }
            ], {
                temperature: 0.15,
                max_tokens: 1500
            })

            return this.parsePsychologicalResponse(response)
            
        } catch (error) {
            console.error('‚ùå Erreur GPT Psychologique:', error.message)
            return null
        }
    }

    /**
     * 3. ANALYSE PATTERNS CONTEXTUELS ULTRA-AVANC√âE
     * GPT d√©tecte des patterns que l'analyse statistique pure rate
     */
    async detectAdvancedPatterns(matchData, historicalContext) {
        console.log('üîç GPT-5: D√©tection patterns contextuels avanc√©s')

        const systemPrompt = `Tu es un expert en analyse de patterns dans le football professionnel.

CAPACIT√âS SP√âCIALIS√âES:
- D√©tection de patterns cach√©s dans les donn√©es
- Corr√©lations non-lin√©aires entre facteurs multiples
- Analyse s√©quentielle de comportements d'√©quipe
- Identification de signatures tactiques/psychologiques
- Patterns temporels (d√©but/fin saison, p√©riodes sp√©cifiques)
- M√©ta-patterns (patterns de patterns)

M√âTHODOLOGIE:
1. Analyse multi-dimensionnelle des donn√©es fournies
2. Croisement avec connaissances football th√©oriques
3. D√©tection d'anomalies et patterns exceptionnels
4. Quantification de la significativit√© statistique
5. Traduction en insights exploitables pour pr√©dictions

Focus: Trouve des patterns que l'analyse traditionnelle ne d√©tecte pas.`

        const userPrompt = this.buildPatternDetectionPrompt(matchData, historicalContext)

        try {
            const response = await this.callGPT([
                { role: 'system', content: systemPrompt },
                { role: 'user', content: userPrompt }
            ], {
                temperature: 0.2,
                max_tokens: 1800
            })

            return this.parsePatternResponse(response)
            
        } catch (error) {
            console.error('‚ùå Erreur GPT Patterns:', error.message)
            return null
        }
    }

    /**
     * 4. SYNTH√àSE INTELLIGENTE MULTI-FACTEURS
     * GPT fusionne tous les √©l√©ments pour une pr√©diction enrichie
     */
    async generateEnhancedPrediction(matchId, tacticalAnalysis, psychologicalAnalysis, patterns) {
        console.log('üéØ GPT-5: Synth√®se pr√©diction enrichie')

        const systemPrompt = `Tu es un pr√©dicteur football d'√©lite combinant:
- Analyse tactique de niveau professionnel
- Psychologie du sport avanc√©e  
- D√©tection de patterns complexes
- Mod√©lisation probabiliste pr√©cise

OBJECTIF: Fusionner tous les √©l√©ments d'analyse pour g√©n√©rer une pr√©diction finale optimis√©e.

CONTRAINTES:
- Probabilit√©s finales coh√©rentes (somme = 1.0)
- Justifications pr√©cises et quantifi√©es
- Niveaux de confiance calibr√©s
- Exploitable par algorithmes de trading`

        const fusionPrompt = this.buildFusionPrompt(tacticalAnalysis, psychologicalAnalysis, patterns)

        try {
            const response = await this.callGPT([
                { role: 'system', content: systemPrompt },
                { role: 'user', content: fusionPrompt }
            ], {
                temperature: 0.05, // Maximum de pr√©cision
                max_tokens: 1200
            })

            const enhancedPrediction = this.parseFusionResponse(response)
            
            // Sauvegarde dans DB
            await this.saveGPTInsights(matchId, {
                tactical: tacticalAnalysis,
                psychological: psychologicalAnalysis,
                patterns: patterns,
                final_prediction: enhancedPrediction
            })

            return enhancedPrediction
            
        } catch (error) {
            console.error('‚ùå Erreur GPT Fusion:', error.message)
            return null
        }
    }

    /**
     * M√âTHODES UTILITAIRES POUR CALCULS AVANC√âS
     */
    inferFormation(team) {
        // Inf√©rence formation bas√©e sur stats
        const possession = team.possession_avg || 50
        const defensiveActions = (team.tackles || 0) + (team.interceptions || 0)
        
        if (possession > 60) return "4-3-3 possession"
        if (defensiveActions > 20) return "5-4-1 d√©fensif"
        return "4-2-3-1 √©quilibr√©"
    }

    calculateTempo(team) {
        const shotsPerGame = team.shots_per_game || 10
        const possession = team.possession_avg || 50
        return Math.round((shotsPerGame / possession) * 100)
    }

    calculateVerticalplay(team) {
        // Simulation ratio passes longues/courtes
        const directness = team.attacking_directness || 0.5
        return Math.round(directness * 100)
    }

    calculateShotConversion(team) {
        const goals = team.goals_for || 0
        const shots = (team.shots_per_game || 10) * (team.games_played || 1)
        return shots > 0 ? Math.round((goals / shots) * 100) : 15
    }

    getxGContext(team) {
        const goalsPerGame = team.goals_per_game || 1
        if (goalsPerGame > 1.8) return "Attaque tr√®s efficace"
        if (goalsPerGame > 1.3) return "Attaque correcte"
        return "Attaque en difficult√©"
    }

    interpretPressure(pressureScore) {
        if (pressureScore > 0.8) return "Pression maximale"
        if (pressureScore > 0.6) return "Pression √©lev√©e" 
        if (pressureScore > 0.4) return "Pression mod√©r√©e"
        return "Pas de pression particuli√®re"
    }

    calculateWeatherImpact(weather) {
        if (weather?.includes('pluie')) return "D√©favorise jeu technique (-0.1)"
        if (weather?.includes('vent')) return "Impacte jeu a√©rien (-0.05)"
        return "Impact n√©gligeable"
    }

    /**
     * APPEL API GPT OPTIMIS√â
     */
    async callGPT(messages, options = {}) {
        const defaultOptions = {
            model: this.model,
            temperature: 0.1,
            max_tokens: 1500,
            top_p: 0.9,
            presence_penalty: 0.1,
            frequency_penalty: 0.1
        }

        const config = {
            method: 'POST',
            url: this.apiUrl,
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            data: {
                ...defaultOptions,
                ...options,
                messages
            }
        }

        const response = await axios(config)
        return response.data.choices[0].message.content
    }

    /**
     * PARSERS DE R√âPONSES SP√âCIALIS√âS
     */
    parseAdvancedTacticalResponse(response) {
        try {
            const jsonMatch = response.match(/\{[\s\S]*\}/)
            if (jsonMatch) {
                return JSON.parse(jsonMatch[0])
            }
            
            // Fallback: extraction manuelle si JSON mal form√©
            return this.extractTacticalDataFallback(response)
        } catch (error) {
            console.error('Erreur parsing tactique:', error.message)
            return null
        }
    }

    parsePsychologicalResponse(response) {
        try {
            const jsonMatch = response.match(/\{[\s\S]*\}/)
            return jsonMatch ? JSON.parse(jsonMatch[0]) : null
        } catch (error) {
            console.error('Erreur parsing psychologique:', error.message)
            return null
        }
    }

    parsePatternResponse(response) {
        try {
            const jsonMatch = response.match(/\{[\s\S]*\}/)
            return jsonMatch ? JSON.parse(jsonMatch[0]) : null
        } catch (error) {
            console.error('Erreur parsing patterns:', error.message)
            return null
        }
    }

    parseFusionResponse(response) {
        try {
            const jsonMatch = response.match(/\{[\s\S]*\}/)
            return jsonMatch ? JSON.parse(jsonMatch[0]) : null
        } catch (error) {
            console.error('Erreur parsing fusion:', error.message)
            return null
        }
    }

    /**
     * SAUVEGARDE INSIGHTS GPT
     */
    async saveGPTInsights(matchId, allInsights) {
        const { error } = await supabase
            .from('ai_match_insights')
            .upsert({
                match_id: matchId,
                key_factors: allInsights.tactical?.key_differentiators || [],
                model_version: 'gpt5_advanced_v1.0',
                predictions: allInsights.final_prediction?.probabilities || {},
                tactical_analysis: allInsights.tactical,
                psychological_analysis: allInsights.psychological,
                pattern_analysis: allInsights.patterns,
                confidence_score: allInsights.final_prediction?.confidence || 0.5,
                created_at: new Date().toISOString()
            })

        if (error) {
            console.error('Erreur sauvegarde GPT insights:', error.message)
        }
    }

    /**
     * M√âTHODE PRINCIPALE - ANALYSE COMPL√àTE GPT
     */
    async runCompleteGPTAnalysis(matchId, homeTeamId, awayTeamId) {
        console.log(`üöÄ GPT-5 Analyse compl√®te match ${matchId}`)
        
        try {
            // 1. R√©cup√©ration donn√©es
            const [homeTeam, awayTeam, context, historicalData] = await Promise.all([
                this.getTeamAdvancedData(homeTeamId),
                this.getTeamAdvancedData(awayTeamId),
                this.getMatchAdvancedContext(matchId),
                this.getHistoricalPatterns(homeTeamId, awayTeamId)
            ])

            console.log('üìä Donn√©es r√©cup√©r√©es, lancement analyses GPT...')

            // 2. Analyses parall√®les GPT
            const [tacticalAnalysis, psychologicalAnalysis, patterns] = await Promise.all([
                this.analyzeTacticalMatchupAdvanced(homeTeam, awayTeam, context),
                this.analyzePsychologicalFactors(homeTeam, awayTeam, context),
                this.detectAdvancedPatterns({ homeTeam, awayTeam, context }, historicalData)
            ])

            console.log('üß† Analyses GPT termin√©es, g√©n√©ration pr√©diction finale...')

            // 3. Synth√®se finale
            const enhancedPrediction = await this.generateEnhancedPrediction(
                matchId, tacticalAnalysis, psychologicalAnalysis, patterns
            )

            console.log('‚úÖ Analyse GPT-5 compl√®te termin√©e')
            return {
                tactical: tacticalAnalysis,
                psychological: psychologicalAnalysis,
                patterns: patterns,
                prediction: enhancedPrediction,
                confidence: enhancedPrediction?.confidence || 0.5
            }

        } catch (error) {
            console.error('üí• Erreur analyse GPT compl√®te:', error.message)
            throw error
        }
    }

    // M√©thodes de r√©cup√©ration donn√©es (√† impl√©menter selon votre DB)
    async getTeamAdvancedData(teamId) {
        const { data } = await supabase
            .from('team_features')
            .select('*')
            .eq('team_id', teamId)
            .eq('season', 2024)
            .single()
        return data
    }

    async getMatchAdvancedContext(matchId) {
        const { data } = await supabase
            .from('match_context')
            .select('*')
            .eq('match_id', matchId)
            .single()
        return data || {}
    }

    async getHistoricalPatterns(homeTeamId, awayTeamId) {
        const { data } = await supabase
            .from('matches')
            .select('*')
            .or(`home_team_id.eq.${homeTeamId},away_team_id.eq.${homeTeamId}`)
            .or(`home_team_id.eq.${awayTeamId},away_team_id.eq.${awayTeamId}`)
            .order('date', { ascending: false })
            .limit(10)
        return data || []
    }
}

module.exports = GPTAdvancedAnalyzer

// Test autonome  
if (require.main === module) {
    const analyzer = new GPTAdvancedAnalyzer()
    console.log('üß† GPT Advanced Analyzer initialis√© - Puissance GPT-5 maximale')
    
    // Test avec donn√©es exemple
    // analyzer.runCompleteGPTAnalysis('test-match', 'team1', 'team2').then(console.log)
}